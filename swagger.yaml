openapi: 3.0.0
info:
  title: Mood Tracker API
  description: API for tracking mood and mental health metrics with dynamic custom scales
  version: 1.0.0
  contact:
    name: API Support
    email: support@moodtracker.com
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.moodtracker.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string

    UserRegistration:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 30
        password:
          type: string
          minLength: 8
          format: password

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    ScaleLevel:
      type: object
      properties:
        level:
          type: integer
          minimum: 0
        description:
          type: string

    Scale:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        isDefault:
          type: boolean
        userId:
          type: string
          format: uuid
          nullable: true
        minValue:
          type: integer
          minimum: 0
        maxValue:
          type: integer
          minimum: 1
        isActive:
          type: boolean
        levels:
          type: array
          items:
            $ref: '#/components/schemas/ScaleLevel'

    CreateScale:
      type: object
      required:
        - name
        - minValue
        - maxValue
        - levels
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        description:
          type: string
          maxLength: 500
        minValue:
          type: integer
          minimum: 0
        maxValue:
          type: integer
          minimum: 1
        isActive:
          type: boolean
          default: true
        levels:
          type: array
          items:
            $ref: '#/components/schemas/ScaleLevel'

    UpdateScale:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        description:
          type: string
          maxLength: 500
        isActive:
          type: boolean
        levels:
          type: array
          items:
            $ref: '#/components/schemas/ScaleLevel'

    ScaleWeight:
      type: object
      required:
        - scaleId
        - weight
      properties:
        scaleId:
          type: string
          format: uuid
        scaleName:
          type: string
          readOnly: true
        weight:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
        isInverted:
          type: boolean
          default: false

    StabilityFormula:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
          nullable: true
        description:
          type: string
        formula:
          type: string
          description: "Formula string representation"
        isDefault:
          type: boolean
        isActive:
          type: boolean
        scaleWeights:
          type: array
          items:
            $ref: '#/components/schemas/ScaleWeight'

    CreateStabilityFormula:
      type: object
      required:
        - description
        - scaleWeights
      properties:
        description:
          type: string
          maxLength: 500
        isActive:
          type: boolean
          default: true
        scaleWeights:
          type: array
          items:
            $ref: '#/components/schemas/ScaleWeight'

    UpdateStabilityFormula:
      type: object
      properties:
        description:
          type: string
          maxLength: 500
        isActive:
          type: boolean
        scaleWeights:
          type: array
          items:
            $ref: '#/components/schemas/ScaleWeight'

    MoodScaleValue:
      type: object
      required:
        - scaleId
        - value
      properties:
        scaleId:
          type: string
          format: uuid
        scaleName:
          type: string
          readOnly: true
        value:
          type: integer
        description:
          type: string
          readOnly: true

    MoodEntry:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        entryDate:
          type: string
          format: date-time
        comment:
          type: string
        medication:
          type: string
        sleepHours:
          type: number
          format: float
          minimum: 0
          maximum: 24
        stabilityScore:
          type: number
          format: float
          readOnly: true
        stabilityDescription:
          type: string
          readOnly: true
        scaleValues:
          type: array
          items:
            $ref: '#/components/schemas/MoodScaleValue'

    CreateMoodEntry:
      type: object
      required:
        - scaleValues
      properties:
        entryDate:
          type: string
          format: date-time
          default: "current date-time"
        comment:
          type: string
          maxLength: 1000
        medication:
          type: string
          maxLength: 255
        sleepHours:
          type: number
          format: float
          minimum: 0
          maximum: 24
        scaleValues:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/MoodScaleValue'

    UpdateMoodEntry:
      type: object
      properties:
        entryDate:
          type: string
          format: date-time
        comment:
          type: string
          maxLength: 1000
        medication:
          type: string
          maxLength: 255
        sleepHours:
          type: number
          format: float
          minimum: 0
          maximum: 24
        scaleValues:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/MoodScaleValue'

    ChatMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    ChatResponse:
      type: object
      properties:
        message:
          type: string
        isAssessment:
          type: boolean
        assessment:
          type: object
          nullable: true

    ConversationMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [user, assistant, system]
        content:
          type: string

    Assessment:
      type: object
      properties:
        scaleValues:
          type: array
          items:
            $ref: '#/components/schemas/MoodScaleValue'
        sleepHours:
          type: number
          format: float
          minimum: 0
          maximum: 24
          nullable: true
        comment:
          type: string
        medication:
          type: string

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
        errors:
          type: array
          items:
            type: string

security:
  - bearerAuth: []

paths:
  /api/users/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/scales:
    get:
      tags:
        - Scales
      summary: Get all scales for the user
      responses:
        '200':
          description: List of scales
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scale'
        '401':
          description: Unauthorized
    post:
      tags:
        - Scales
      summary: Create a new scale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScale'
      responses:
        '201':
          description: Scale created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scale'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '409':
          description: Scale with this name already exists

  /api/scales/{id}:
    get:
      tags:
        - Scales
      summary: Get a scale by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Scale found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scale'
        '401':
          description: Unauthorized
        '404':
          description: Scale not found
    put:
      tags:
        - Scales
      summary: Update a scale
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScale'
      responses:
        '200':
          description: Scale updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scale'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Scale not found
    delete:
      tags:
        - Scales
      summary: Delete a scale
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Scale deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Scale not found

  /api/mood-entries:
    get:
      tags:
        - Mood Entries
      summary: Get all mood entries
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          description: Maximum number of entries to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          description: Pagination offset
      responses:
        '200':
          description: List of mood entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodEntry'
        '401':
          description: Unauthorized
    post:
      tags:
        - Mood Entries
      summary: Create a new mood entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMoodEntry'
      responses:
        '201':
          description: Mood entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoodEntry'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized

  /api/mood-entries/{id}:
    get:
      tags:
        - Mood Entries
      summary: Get a mood entry by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Mood entry found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoodEntry'
        '401':
          description: Unauthorized
        '404':
          description: Mood entry not found
    put:
      tags:
        - Mood Entries
      summary: Update a mood entry
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMoodEntry'
      responses:
        '200':
          description: Mood entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoodEntry'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Mood entry not found
    delete:
      tags:
        - Mood Entries
      summary: Delete a mood entry
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Mood entry deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Mood entry not found

  /api/stability-formulas:
    get:
      tags:
        - Stability Formulas
      summary: Get all stability formulas
      responses:
        '200':
          description: List of stability formulas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StabilityFormula'
        '401':
          description: Unauthorized
    post:
      tags:
        - Stability Formulas
      summary: Create a new stability formula
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStabilityFormula'
      responses:
        '201':
          description: Stability formula created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityFormula'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized

  /api/stability-formulas/active:
    get:
      tags:
        - Stability Formulas
      summary: Get active stability formula
      responses:
        '200':
          description: Active stability formula
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityFormula'
        '401':
          description: Unauthorized
        '404':
          description: No active formula found

  /api/stability-formulas/{id}:
    get:
      tags:
        - Stability Formulas
      summary: Get a stability formula by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Stability formula found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityFormula'
        '401':
          description: Unauthorized
        '404':
          description: Stability formula not found
    put:
      tags:
        - Stability Formulas
      summary: Update a stability formula
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStabilityFormula'
      responses:
        '200':
          description: Stability formula updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityFormula'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Stability formula not found
    delete:
      tags:
        - Stability Formulas
      summary: Delete a stability formula
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Stability formula deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Stability formula not found

  /api/ai-assessment/chat:
    post:
      tags:
        - AI Assessment
      summary: Send a chat message to the AI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
      responses:
        '200':
          description: AI response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '500':
          description: AI service error

  /api/ai-assessment/assess:
    post:
      tags:
        - AI Assessment
      summary: Generate a mood assessment from a conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - conversation
              properties:
                conversation:
                  type: array
                  items:
                    $ref: '#/components/schemas/ConversationMessage'
      responses:
        '200':
          description: Generated assessment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '500':
          description: AI service error

  /api/ai-assessment/save-assessment:
    post:
      tags:
        - AI Assessment
      summary: Save an AI-generated assessment as a mood entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assessment'
      responses:
        '201':
          description: Assessment saved as mood entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoodEntry'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '500':
          description: Error saving assessment